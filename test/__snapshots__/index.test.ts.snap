// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate code with immutability 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  readonly __typename?: 'Mutation';
  readonly createPost?: Maybe<Post>;
};


export type MutationCreatePostArgs = {
  data: PostInput;
};

export type Post = {
  readonly __typename?: 'Post';
  readonly id: Scalars['ID'];
  readonly title: Scalars['String'];
};

export type PostInput = {
  readonly title: Scalars['String'];
};

export type Query = {
  readonly __typename?: 'Query';
  readonly post?: Maybe<Post>;
};


export type QueryPostArgs = {
  id: Scalars['ID'];
};

export type PostVariables = Exact<{
  id: Scalars['ID'];
}>;


export type Post = { readonly __typename?: 'Query', readonly post?: Maybe<(
    { readonly __typename?: 'Post' }
    & PostFragment
  )> };

export type PostFragment = { readonly __typename?: 'Post', readonly id: string, readonly title: string };

export type CreatePostVariables = Exact<{
  data: PostInput;
}>;


export type CreatePost = { readonly __typename?: 'Mutation', readonly createPost?: Maybe<{ readonly __typename?: 'Post', readonly id: string, readonly title: string }> };

export const PostFragment = gql\`
    fragment PostFragment on Post {
  id
  title
}
    \`;
export const PostDocument = gql\`
    query Post($id: ID!) {
  post(id: $id) {
    ...PostFragment
  }
}
    \${PostFragment}\`;

/**
 * __usePost__
 *
 * To run a query within a React component, call \`usePost\` and pass it any options that fit your needs.
 * When your component renders, \`usePost\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePost({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePost(baseOptions: Apollo.QueryHookOptions<Post, PostVariables>) {
        return Apollo.useQuery<Post, PostVariables>(PostDocument, baseOptions);
      }
export function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Post, PostVariables>) {
          return Apollo.useLazyQuery<Post, PostVariables>(PostDocument, baseOptions);
        }
export type PostHookResult = ReturnType<typeof usePost>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<Post, PostVariables>;
export const CreatePostDocument = gql\`
    mutation CreatePost($data: PostInput!) {
  createPost(data: $data) {
    id
    title
  }
}
    \`;
export type CreatePostMutationFn = Apollo.MutationFunction<CreatePost, CreatePostVariables>;

/**
 * __useCreatePost__
 *
 * To run a mutation, you first call \`useCreatePost\` within a React component and pass it any options that fit your needs.
 * When your component renders, \`useCreatePost\` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPost, { data, loading, error }] = useCreatePost({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePost(baseOptions?: Apollo.MutationHookOptions<CreatePost, CreatePostVariables>) {
        return Apollo.useMutation<CreatePost, CreatePostVariables>(CreatePostDocument, baseOptions);
      }
export type CreatePostHookResult = ReturnType<typeof useCreatePost>;
export type CreatePostMutationResult = Apollo.MutationResult<CreatePost>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePost, CreatePostVariables>;"
`;

exports[`generate code with suffix 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  createPost?: Maybe<Post>;
};


export type MutationCreatePostArgs = {
  data: PostInput;
};

export type Post = {
  __typename?: 'Post';
  id: Scalars['ID'];
  title: Scalars['String'];
};

export type PostInput = {
  title: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  post?: Maybe<Post>;
};


export type QueryPostArgs = {
  id: Scalars['ID'];
};

export type PostQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type PostQuery = { __typename?: 'Query', post?: Maybe<(
    { __typename?: 'Post' }
    & PostFragmentFragment
  )> };

export type PostFragmentFragment = { __typename?: 'Post', id: string, title: string };

export type CreatePostMutationVariables = Exact<{
  data: PostInput;
}>;


export type CreatePostMutation = { __typename?: 'Mutation', createPost?: Maybe<{ __typename?: 'Post', id: string, title: string }> };

export const PostFragmentFragmentDoc = gql\`
    fragment PostFragment on Post {
  id
  title
}
    \`;
export const PostDocument = gql\`
    query Post($id: ID!) {
  post(id: $id) {
    ...PostFragment
  }
}
    \${PostFragmentFragmentDoc}\`;

/**
 * __usePostQuery__
 *
 * To run a query within a React component, call \`usePostQuery\` and pass it any options that fit your needs.
 * When your component renders, \`usePostQuery\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePostQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePostQuery(baseOptions: Apollo.QueryHookOptions<PostQuery, PostQueryVariables>) {
        return Apollo.useQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);
      }
export function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PostQuery, PostQueryVariables>) {
          return Apollo.useLazyQuery<PostQuery, PostQueryVariables>(PostDocument, baseOptions);
        }
export type PostQueryHookResult = ReturnType<typeof usePostQuery>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<PostQuery, PostQueryVariables>;
export const CreatePostDocument = gql\`
    mutation CreatePost($data: PostInput!) {
  createPost(data: $data) {
    id
    title
  }
}
    \`;
export type CreatePostMutationFn = Apollo.MutationFunction<CreatePostMutation, CreatePostMutationVariables>;

/**
 * __useCreatePostMutation__
 *
 * To run a mutation, you first call \`useCreatePostMutation\` within a React component and pass it any options that fit your needs.
 * When your component renders, \`useCreatePostMutation\` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPostMutation, { data, loading, error }] = useCreatePostMutation({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePostMutation(baseOptions?: Apollo.MutationHookOptions<CreatePostMutation, CreatePostMutationVariables>) {
        return Apollo.useMutation<CreatePostMutation, CreatePostMutationVariables>(CreatePostDocument, baseOptions);
      }
export type CreatePostMutationHookResult = ReturnType<typeof useCreatePostMutation>;
export type CreatePostMutationResult = Apollo.MutationResult<CreatePostMutation>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePostMutation, CreatePostMutationVariables>;"
`;

exports[`generates code 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  createPost?: Maybe<Post>;
};


export type MutationCreatePostArgs = {
  data: PostInput;
};

export type Post = {
  __typename?: 'Post';
  id: Scalars['ID'];
  title: Scalars['String'];
};

export type PostInput = {
  title: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  post?: Maybe<Post>;
};


export type QueryPostArgs = {
  id: Scalars['ID'];
};

export type PostVariables = Exact<{
  id: Scalars['ID'];
}>;


export type Post = { __typename?: 'Query', post?: Maybe<(
    { __typename?: 'Post' }
    & PostFragment
  )> };

export type PostFragment = { __typename?: 'Post', id: string, title: string };

export type CreatePostVariables = Exact<{
  data: PostInput;
}>;


export type CreatePost = { __typename?: 'Mutation', createPost?: Maybe<{ __typename?: 'Post', id: string, title: string }> };

export const PostFragment = gql\`
    fragment PostFragment on Post {
  id
  title
}
    \`;
export const PostDocument = gql\`
    query Post($id: ID!) {
  post(id: $id) {
    ...PostFragment
  }
}
    \${PostFragment}\`;

/**
 * __usePost__
 *
 * To run a query within a React component, call \`usePost\` and pass it any options that fit your needs.
 * When your component renders, \`usePost\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePost({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePost(baseOptions: Apollo.QueryHookOptions<Post, PostVariables>) {
        return Apollo.useQuery<Post, PostVariables>(PostDocument, baseOptions);
      }
export function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Post, PostVariables>) {
          return Apollo.useLazyQuery<Post, PostVariables>(PostDocument, baseOptions);
        }
export type PostHookResult = ReturnType<typeof usePost>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<Post, PostVariables>;
export const CreatePostDocument = gql\`
    mutation CreatePost($data: PostInput!) {
  createPost(data: $data) {
    id
    title
  }
}
    \`;
export type CreatePostMutationFn = Apollo.MutationFunction<CreatePost, CreatePostVariables>;

/**
 * __useCreatePost__
 *
 * To run a mutation, you first call \`useCreatePost\` within a React component and pass it any options that fit your needs.
 * When your component renders, \`useCreatePost\` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPost, { data, loading, error }] = useCreatePost({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePost(baseOptions?: Apollo.MutationHookOptions<CreatePost, CreatePostVariables>) {
        return Apollo.useMutation<CreatePost, CreatePostVariables>(CreatePostDocument, baseOptions);
      }
export type CreatePostHookResult = ReturnType<typeof useCreatePost>;
export type CreatePostMutationResult = Apollo.MutationResult<CreatePost>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePost, CreatePostVariables>;"
`;

exports[`generates code without suffix by default 1`] = `
"import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Mutation = {
  __typename?: 'Mutation';
  createPost?: Maybe<Post>;
};


export type MutationCreatePostArgs = {
  data: PostInput;
};

export type Post = {
  __typename?: 'Post';
  id: Scalars['ID'];
  title: Scalars['String'];
};

export type PostInput = {
  title: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  post?: Maybe<Post>;
};


export type QueryPostArgs = {
  id: Scalars['ID'];
};

export type PostVariables = Exact<{
  id: Scalars['ID'];
}>;


export type Post = { __typename?: 'Query', post?: Maybe<(
    { __typename?: 'Post' }
    & PostFragment
  )> };

export type PostFragment = { __typename?: 'Post', id: string, title: string };

export type CreatePostVariables = Exact<{
  data: PostInput;
}>;


export type CreatePost = { __typename?: 'Mutation', createPost?: Maybe<{ __typename?: 'Post', id: string, title: string }> };

export const PostFragment = gql\`
    fragment PostFragment on Post {
  id
  title
}
    \`;
export const PostDocument = gql\`
    query Post($id: ID!) {
  post(id: $id) {
    ...PostFragment
  }
}
    \${PostFragment}\`;

/**
 * __usePost__
 *
 * To run a query within a React component, call \`usePost\` and pass it any options that fit your needs.
 * When your component renders, \`usePost\` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePost({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function usePost(baseOptions: Apollo.QueryHookOptions<Post, PostVariables>) {
        return Apollo.useQuery<Post, PostVariables>(PostDocument, baseOptions);
      }
export function usePostLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Post, PostVariables>) {
          return Apollo.useLazyQuery<Post, PostVariables>(PostDocument, baseOptions);
        }
export type PostHookResult = ReturnType<typeof usePost>;
export type PostLazyQueryHookResult = ReturnType<typeof usePostLazyQuery>;
export type PostQueryResult = Apollo.QueryResult<Post, PostVariables>;
export const CreatePostDocument = gql\`
    mutation CreatePost($data: PostInput!) {
  createPost(data: $data) {
    id
    title
  }
}
    \`;
export type CreatePostMutationFn = Apollo.MutationFunction<CreatePost, CreatePostVariables>;

/**
 * __useCreatePost__
 *
 * To run a mutation, you first call \`useCreatePost\` within a React component and pass it any options that fit your needs.
 * When your component renders, \`useCreatePost\` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPost, { data, loading, error }] = useCreatePost({
 *   variables: {
 *      data: // value for 'data'
 *   },
 * });
 */
export function useCreatePost(baseOptions?: Apollo.MutationHookOptions<CreatePost, CreatePostVariables>) {
        return Apollo.useMutation<CreatePost, CreatePostVariables>(CreatePostDocument, baseOptions);
      }
export type CreatePostHookResult = ReturnType<typeof useCreatePost>;
export type CreatePostMutationResult = Apollo.MutationResult<CreatePost>;
export type CreatePostMutationOptions = Apollo.BaseMutationOptions<CreatePost, CreatePostVariables>;"
`;
